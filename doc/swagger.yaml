openapi: 3.0.0
info:
  title: API Documentation
  version: 1.0.0
paths:
  /auth/login:
    post:
      summary: "Login"
      description: "Authenticate a user to get an authentication token."
      operationId: "login"
      tags:
        - "Authentication"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "john.doe@example.com"
                password:
                  type: string
                  example: "hashedpassword"
      responses:
        '200':
          description: "Login successful"
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "jwt-token"
        '401':
          description: "Unauthorized"
  /users:
    get:
      summary: "Get all users"
      description: "Fetch all users in the system (Admin only)."
      operationId: "getUsers"
      tags:
        - "User Management"
      responses:
        '200':
          description: "List of users"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    uID:
                      type: integer
                      example: 1
                    name:
                      type: string
                      example: "John Doe"
                    email:
                      type: string
                      example: "john.doe@example.com"
                    mobile:
                      type: string
                      example: "1234567890"
                    nic:
                      type: string
                      example: "123456789V"
                    password:
                      type: string
                      nullable: true
                      description: "The user's password. Should be null for security reasons."
                      example: null
                    role:
                      type: string
                      example: "student"
                    is_active:
                      type: boolean
                      nullable: true
                      description: "Indicates whether the lecturer is active. Can be null."
                      example: true

  /create/admin:
    post:
      summary: "Create a new admin user"
      description: "Allows the creation of a new admin user with the provided details."
      operationId: "createAdmin"
      tags:
        - "User Management"
      requestBody:
        description: "Admin user details required to create a new admin account."
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: "Full name of the admin"
                  example: "John Doe"
                email:
                  type: string
                  description: "Email address of the admin"
                  format: email
                  example: "admin@example.com"
                mobile:
                  type: string
                  description: "Mobile number of the admin"
                  example: "1234567890"
                nic:
                  type: string
                  description: "National ID or unique identification for the admin"
                  example: "NIC12345"
                password:
                  type: string
                  description: "Password for the admin account"
                  format: password
                  example: "password123"
                createdBy:
                  type: string
                  description: "User ID of the admin who is creating this account"
                  example: "1"
      responses:
        '200':
          description: "Admin user successfully created"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Admin user created successfully."
                  adminId:
                    type: integer
                    example: 101
        '400':
          description: "Invalid input data"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User not created."
  /admin:
    get:
      summary: "Get all admin users"
      description: "Fetch all admin users in the system."
      operationId: "getAdmins"
      tags:
        - "User Management"
      responses:
        '200':
          description: "List of admin users"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      example: "John Doe"
                    email:
                      type: string
                      example: "admin@example.com"
                    mobile:
                      type: string
                      example: "1234567890"
                    nic:
                      type: string
                      example: "NIC12345"
                    password:
                      type: string
                      nullable: true
                      example: null
                    is_active:
                      type: boolean
                      nullable: true
                      example: null
        '400':
          description: "Admins not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Admins not found."

  /create/students:
    post:
      summary: "Create a new student"
      description: "Allows the creation of a new student with the provided details."
      operationId: "createStudent"
      tags:
        - "User Management"
      requestBody:
        description: "Student details required to create a new student account."
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: "Full name of the student"
                  example: "Jane Doe"
                email:
                  type: string
                  description: "Email address of the student"
                  format: email
                  example: "student@example.com"
                mobile:
                  type: string
                  description: "Mobile number of the student"
                  example: "9876543210"
                password:
                  type: string
                  description: "Password for the student account"
                  format: password
                  example: "password123"
                createdBy:
                  type: string
                  description: "User ID of the admin or staff creating this student account"
                  example: "1"
      responses:
        '200':
          description: "Student successfully created"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Student created successfully."
                  studentId:
                    type: integer
                    example: 101
        '400':
          description: "Invalid input data"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User not created."
  /students:
    get:
      summary: "Get all students"
      description: "Fetch all students in the system."
      operationId: "getStudents"
      tags:
        - "User Management"
      responses:
        '200':
          description: "List of students"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      example: "John Doe"
                    email:
                      type: string
                      example: "john.doe@example.com"
                    mobile:
                      type: string
                      example: "1234567890"
                    nic:
                      type: string
                      example: "NIC12345"
                    password:
                      type: string
                      nullable: true
                      example: null
                    is_active:
                      type: boolean
                      nullable: true
                      example: null
        '400':
          description: "Students not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Students not found."
  /create/lecturers:
    post:
      summary: "Create a new lecturer"
      description: "Allows the creation of a new lecturer with the provided details."
      operationId: "createLecturer"
      tags:
        - "User Management"
      requestBody:
        description: "Lecturer details required to create a new lecturer account."
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: "Full name of the lecturer"
                  example: "Jane Smith"
                email:
                  type: string
                  description: "Email address of the lecturer"
                  format: email
                  example: "lecturer@example.com"
                mobile:
                  type: string
                  description: "Mobile number of the lecturer"
                  example: "9876543210"
                nic:
                  type: string
                  description: "National ID or unique identification for the lecturer"
                  example: "NIC67890"
                password:
                  type: string
                  description: "Password for the lecturer account"
                  format: password
                  example: "password123"
                createdBy:
                  type: string
                  description: "User ID of the admin who is creating this account"
                  example: "1"
      responses:
        '200':
          description: "Lecturer successfully created"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Lecturer created successfully."
                  lecturerId:
                    type: integer
                    example: 201
        '400':
          description: "Invalid input data"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Lecturer not created."
  /lecturers:
    get:
      summary: "Get all lecturers"
      description: "Fetch all lecturers in the system."
      operationId: "getLecturers"
      tags:
        - "User Management"
      responses:
        '200':
          description: "List of lecturers"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      example: "John Doe"
                    email:
                      type: string
                      example: "john.doe@example.com"
                    mobile:
                      type: string
                      example: "1234567890"
                    nic:
                      type: string
                      example: "NIC12345"
                    password:
                      type: string
                      nullable: true
                      example: null
                    is_active:
                      type: boolean
                      nullable: true
                      example: null
        '400':
          description: "Lecturers not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Lecturers not found."
  /search/{nic}:
    get:
      summary: "Search user by NIC"
      description: "Fetch user details by NIC."
      operationId: "searchUserByNIC"
      tags:
        - "User Management"
      parameters:
        - name: nic
          in: path
          required: true
          description: "The NIC of the user to be searched."
          schema:
            type: string
            example: "NIC12345"
      responses:
        '400':
          description: "User not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User not found."
  /users/{id}:
    get:
      summary: "Get user by ID"
      description: "Fetches the user information based on the provided user ID."
      operationId: getUserById
      tags:
        - "User Management"
      parameters:
        - in: path
          name: id
          required: true
          description: "The unique ID of the user to retrieve."
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: "User details fetched successfully."
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  name:
                    type: string
                    example: "John Doe"
                  email:
                    type: string
                    example: "john.doe@example.com"
                  mobile:
                    type: string
                    example: "1234567890"
        '400':
          description: "User not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User not found"

  /users/{uID}:
    put:
      summary: "Update user details"
      description: "Allows admin or the user themselves to update their profile information, including personal details and career portfolios."
      operationId: "updateUser"
      tags:
        - "User Management"
      parameters:
        - name: uID
          in: path
          required: true
          description: "The unique ID of the user to be updated."
          schema:
            type: integer
            example: 1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: "Full name of the user"
                  example: "John Doe"
                email:
                  type: string
                  description: "User's email address"
                  example: "john.doe@example.com"
                mobile:
                  type: string
                  description: "User's mobile number"
                  example: "1234567890"
                nic:
                  type: string
                  description: "National ID or equivalent"
                  example: "ABC1234567"
      responses:
        '200':
          description: "User not updated"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User updated successfully"
        '400':
          description: "Invalid input data"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User not updated"
    delete:
      summary: "Delete a user by their unique ID"
      description: "Allows the admin to delete a user based on their unique ID."
      operationId: "deleteUser"
      tags:
        - "User Management"
      parameters:
        - name: uID
          in: path
          required: true
          description: "The unique ID of the user to be deleted."
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: "User deleted successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User deleted successfully."
        '400':
          description: "User not deleted"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User not deleted."
  /password/{uID}:
    put:
      summary: "Update the password of a user"
      description: "Allows the admin to update the password of a user by their unique ID."
      operationId: "updatePassword"
      tags:
        - "User Management"
      parameters:
        - name: uID
          in: path
          required: true
          description: "The unique ID of the user whose password is being updated."
          schema:
            type: integer
            example: 1
      requestBody:
        description: "New password details for the user."
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  description: "The new password for the user."
                  example: "newpassword123"
      responses:
        '200':
          description: "Password updated successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password updated successfully."
        '400':
          description: "Password not updated"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password not updated."
  /batches:
    post:
      summary: "Create a new batch"
      description: "Creates a new batch with the specified details."
      operationId: "createBatch"
      tags:
        - "Batch Management"
      requestBody:
        description: "Provide the batch details"
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                batchName:
                  type: string
                  description: "Name of the batch"
                  example: "Batch A"
                commonEmail:
                  type: string
                  description: "Common email address associated with the batch"
                  example: "batchA@example.com"
                createdBy:
                  type: string
                  description: "User ID of the admin who is creating this account"
                  example: "1"
      responses:
        '200':
          description: "Batch created successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Batch created successfully."
                  batchID:
                    type: integer
                    description: "Unique ID of the created batch"
                    example: 101
        '400':
          description: "Invalid batch data provided. "
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid batch data provided."
    get:
      summary: "Get all batches"
      description: "Retrieves a list of all available batches."
      operationId: getAllBatches
      tags:
        - "Batch Management"
      responses:
        '200':
          description: "Successfully retrieved the list of batches."
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 101
                    name:
                      type: string
                      example: "Batch A"
                    description:
                      type: string
                      example: "This is a description of Batch A."
                    createdAt:
                      type: string
                      format: date-time
                      example: "2024-12-30T10:00:00"
        '500':
          description: "Internal server error."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "An error occurred while fetching batches."
  /{id}:
    delete:
      summary: "Delete a resource by ID"
      description: "Deletes a resource with the given ID."
      operationId: "deleteResourceById"
      tags:
        - "Batch Management"
      parameters:
        - name: id
          in: path
          required: true
          description: "ID of the resource to be deleted"
          schema:
            type: integer
            example: 123
      responses:
        '200':
          description: "Resource deleted successfully"
        '404':
          description: "Resource not found"
  /assign/{id}:
    delete:
      summary: "Unassign  user from a resource by ID"
      description: "Unassigns a user from a resource using the provided ID."
      operationId: "unassignUserById"
      tags:
        - "Batch Management"
      parameters:
        - name: id
          in: path
          required: true
          description: "ID of the user or resource to unassign"
          schema:
            type: integer
            example: 123
      responses:
        '200':
          description: " "
        '404':
          description: " "

  /assign/{bID}/{uID}:
    post:
      summary: "Associate a user to a batch"
      description: "Associates the batch with the user by using the specified batch ID and user ID."
      operationId: associateBatchWithUser
      tags:
        - "Batch Management"
      parameters:
        - in: path
          name: bID
          required: true
          description: "The ID of the batch"
          schema:
            type: integer
            example: 101
        - in: path
          name: uID
          required: true
          description: "The ID of the user"
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: "Batch successfully associated with the user"
        '400':
          description: "Invalid input or batch/user not found"

  /allBatches/{uID}:
    get:
      summary: "Get all batches for a specific user"
      description: "Fetch all batches associated with the user specified by the user ID."
      operationId: getAllBatchesForUser
      tags:
        - "Batch Management"
      parameters:
        - in: path
          name: uID
          required: true
          description: "The ID of the user"
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: "Successfully retrieved the batches for the user."
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    batchId:
                      type: integer
                      example: 101
                    batchName:
                      type: string
                      example: "Batch A"
                    commonEmail:
                      type: string
                      example: "batch-a@example.com"
        '404':
          description: "User not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User not found"

  /allStudents/{bID}:
    get:
      summary: "Get all students in a specific batch"
      description: "Fetch all students associated with the batch specified by the batch ID."
      operationId: getAllStudentsForBatch
      tags:
        - "Batch Management"
      parameters:
        - in: path
          name: bID
          required: true
          description: "The ID of the batch"
          schema:
            type: integer
            example: 101
      responses:
        '404':
          description: "Batch not found."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Batch not found."
  /batches/{id}:
    get:
      summary: "Get batch by ID"
      description: "Fetches the batch details based on the provided batch ID."
      operationId: getBatchById
      tags:
        - "Batch Management"
      parameters:
        - in: path
          name: id
          required: true
          description: "The unique ID of the batch to retrieve."
          schema:
            type: integer
            example: 101
      responses:
        '200':
          description: "Batch details fetched successfully."
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 101
                  name:
                    type: string
                    example: "Batch A"
                  description:
                    type: string
                    example: "This is a description of Batch A."
                  createdAt:
                    type: string
                    format: date-time
                    example: "2024-12-30T10:00:00"
        '404':
          description: "Batch not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Batch not found"
  /batches/{bID}:
    put:
      summary: "Update batch details"
      description: "Allows the admin to update the details of a specific batch using its bID."
      operationId: "updateBatch"
      tags:
        - "Batch Management"
      parameters:
        - name: bID
          in: path
          required: true
          description: "The ID of the batch to update."
          schema:
            type: integer
            example: 1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                batch_name:
                  type: string
                  example: "Batch A"
                start_date:
                  type: string
                  format: date
                  example: "2024-01-01"
                end_date:
                  type: string
                  format: date
                  example: "2024-12-31"
                status:
                  type: string
                  enum:
                    - active
                    - inactive
                  example: "active"
      responses:
        '404':
          description: "Batch not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Batch not found."

  /interview:
    post:
      summary: "Create a new interview event"
      description: "Creates a new interview event with the specified details."
      operationId: createInterviewEvent
      tags:
        - "Event Management"
      requestBody:
        description: "Details for creating the new interview event."
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: "Title of the interview"
                  example: "interview 1"
                description:
                  type: string
                  description: "Description of the interview"
                  example: "best interview"
                startDateTime:
                  type: string
                  format: date-time
                  description: "Scheduled start date and time of the interview"
                  example: "2024-12-30T10:00:00"
                createdBy:
                  type: integer
                  description: "ID of the user who created the event"
                  example: 4
      responses:
        '200':
          description: "Interview event successfully created"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Interview event created successfully."
                  eventId:
                    type: integer
                    example: 101
        '400':
          description: "Invalid input data provided"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid input data provided."

    get:
      summary: "Retrieve all interviews"
      description: "Fetches a list of all interviews with their details."
      operationId: getInterviews
      tags:
        - "Event Management"
      responses:
        '200':
          description: "A list of interviews"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    title:
                      type: string
                      description: "Title of the interview"
                      example: "interview 1"
                    description:
                      type: string
                      description: "Description of the interview"
                      example: "best interview"
                    startDateTime:
                      type: string
                      format: date-time
                      description: "Scheduled start date and time of the interview"
                      example: "2024-12-30T10:00:00"
                    createdBy:
                      type: integer
                      description: "User ID of the creator of the interview"
                      example: 4
        '404':
          description: "No interviews found"
  /workshop:
    post:
      summary: "Create a new workshop event"
      description: "Creates a new workshop event with the specified details."
      operationId: createWorkshopEvent
      tags:
        - "Event Management"
      requestBody:
        description: "Details for creating the new workshop event."
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: "Title of the workshop"
                  example: "Workshop on Web Development"
                description:
                  type: string
                  description: "Description of the workshop"
                  example: "Learn the basics of web development in this hands-on workshop."
                startDateTime:
                  type: string
                  format: date-time
                  description: "Scheduled start date and time of the workshop"
                  example: "2024-12-30T14:00:00"
                createdBy:
                  type: integer
                  description: "ID of the user who created the event"
                  example: 4
      responses:
        '200':
          description: "Workshop event successfully created"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Workshop event created successfully."
                  eventId:
                    type: integer
                    example: 202
        '400':
          description: "Invalid input data provided"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid input data provided."

    get:
      summary: "Retrieve all workshops"
      description: "Fetches a list of all workshops with their details."
      operationId: getWorkshops
      tags:
        - "Event Management"
      responses:
        '200':
          description: "A list of workshops"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    title:
                      type: string
                      description: "Title of the workshop"
                      example: "interview 1"
                    description:
                      type: string
                      description: "Description of the workshop"
                      example: "best interview"
                    startDateTime:
                      type: string
                      format: date-time
                      description: "Scheduled start date and time of the workshop"
                      example: "2024-12-30T10:00:00"
                    createdBy:
                      type: integer
                      description: "User ID of the creator of the workshop"
                      example: 4
        '404':
          description: "No workshops found"
  /attendance/{eID}/{uID}:
    post:
      summary: "Record attendance for an event"
      description: "Records a student's attendance for a specific event, along with optional points."
      operationId: recordAttendance
      tags:
        - "Event Management"
      parameters:
        - in: path
          name: eID
          required: true
          description: "The ID of the event"
          schema:
            type: integer
            example: 101
        - in: path
          name: uID
          required: true
          description: "The ID of the student"
          schema:
            type: integer
            example: 1
      requestBody:
        description: "Optional data to include points for the attendance record."
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                point:
                  type: integer
                  description: "Points awarded for the event attendance"
                  example: 10

      responses:
        '200':
          description: "Attendance successfully recorded"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Attendance recorded successfully."
        '400':
          description: "Invalid input data"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid input data provided."
  /event/{eID}:
    get:
      summary: "Retrieve a specific event by its ID"
      description: "Fetches the details of a specific event using its unique ID."
      operationId: getEventById
      tags:
        - "Event Management"
      parameters:
        - in: path
          name: eID
          required: true
          description: "The unique ID of the event to retrieve"
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: "Details of the event"
          content:
            application/json:
              schema:
                type: object
                properties:
                  eID:
                    type: integer
                    description: "Event ID"
                    example: 1
                  title:
                    type: string
                    description: "Event title"
                    example: "Tech Workshop"
                  description:
                    type: string
                    description: "Event description"
                    example: "An interactive tech workshop on modern development tools."
                  scheduled_datetime:
                    type: string
                    format: date-time
                    description: "Scheduled date and time of the event"
                    example: "2024-12-30T10:00:00"
                  is_active:
                    type: boolean
                    description: "Indicates if the event is active"
                    example: true
                  createdBy:
                    type: integer
                    description: "ID of the user who created the event"
                    example: 4
                  announcement_id:
                    type: integer
                    description: "Related announcement ID (if applicable)"
                    example: 101
        '404':
          description: "Event not found"
    put:
      summary: "Update an event"
      description: "Updates the details of an existing event identified by its unique event ID."
      operationId: updateEvent
      tags:
        - "Event Management"
      parameters:
        - in: path
          name: eID
          required: true
          description: "The unique ID of the event to be updated"
          schema:
            type: integer
            example: 1
      requestBody:
        description: "Updated event details"
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: "Title of the event"
                  example: "Updated Event Title"
                description:
                  type: string
                  description: "Description of the event"
                  example: "Updated description of the event."
                scheduled_datetime:
                  type: string
                  format: date-time
                  description: "Scheduled date and time of the event"
                  example: "2025-01-15T15:30:00"
                is_active:
                  type: boolean
                  description: "Event status (active/inactive)"
                  example: true
      responses:
        '200':
          description: "Event updated successfully"
        '400':
          description: "Invalid event details provided"
        '404':
          description: "Event not found"
        '500':
          description: "Internal server error"
    delete:
      summary: "Delete an event"
      description: "Allows the deletion of an event identified by `eID`."
      operationId: deleteEvent
      tags:
        - "Event Management"
      parameters:
        - in: path
          name: eID
          required: true
          description: "The unique ID of the event to be deleted"
          schema:
            type: integer
            example: 101
      responses:
        '200':
          description: "Event successfully deleted"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Event deleted successfully."
        '400':
          description: "Invalid event ID or event not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid event ID or event not found."
  /attendance/event/{eID}:
    get:
      summary: "Retrieve attendance for a specific event"
      description: "Fetches attendance details for the specified event ID."
      operationId: getAttendanceByEventId
      tags:
        - "Event Management"
      parameters:
        - in: path
          name: eID
          required: true
          description: "The unique ID of the event to retrieve attendance for"
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: "Attendance details for the event"
        '404':
          description: "Event or attendance records not found"
  /attendance/user/{eID}:
    get:
      summary: "Retrieve attendance for a user in a specific event"
      description: "Fetches attendance details for a user in the specified event."
      operationId: getUserAttendanceByEventId
      tags:
        - "Event Management"
      parameters:
        - in: path
          name: eID
          required: true
          description: "The unique ID of the event to retrieve user attendance for"
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: "User attendance details for the event"
        '404':
          description: "Event or user attendance records not found"
  /assign/{eID}/{aID}:
    put:
      summary: "Assign an announcement to an event"
      description: "Assigns an announcement (identified by `aID`) to an event (identified by `eID`)."
      operationId: assignAnnouncementToEvent
      tags:
        - "Event Management"
      parameters:
        - in: path
          name: eID
          required: true
          description: "The unique ID of the event to which the announcement will be assigned"
          schema:
            type: integer
            example: 1
        - in: path
          name: aID
          required: true
          description: "The unique ID of the announcement to be assigned"
          schema:
            type: integer
            example: 101
      responses:
        '200':
          description: "Announcement successfully assigned to the event"
        '400':
          description: "Invalid event or announcement data provided"
        '404':
          description: "Event or announcement not found"
        '500':
          description: "Internal server error"
  /unassign/{eID}:
    put:
      summary: "Unassign an announcement from an event"
      description: "Unassigns an announcement from the specified event (identified by `eID`)."
      operationId: unassignAnnouncementFromEvent
      tags:
        - "Event Management"
      parameters:
        - in: path
          name: eID
          required: true
          description: "The unique ID of the event from which the announcement will be unassigned"
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: "Announcement successfully unassigned from the event"
        '400':
          description: "Invalid event data provided"
        '404':
          description: "Event not found"
        '500':
          description: "Internal server error"
  /attendance/{seID}/{aID}:
    put:
      summary: "Update attendance for a student in a specific event"
      description: "Allows updating the attendance status of a student identified by `seID` in the event specified by `aID`."
      operationId: updateAttendance
      tags:
        - "Event Management"
      parameters:
        - in: path
          name: seID
          required: true
          description: "The unique ID of the student-event participation"
          schema:
            type: integer
            example: 1
        - in: path
          name: aID
          required: true
          description: "The unique ID of the attendance record"
          schema:
            type: integer
            example: 101
      requestBody:
        description: "Updated attendance details"
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                point:
                  type: integer
                  description: "Points awarded to the student for attending the event"
                  example: 10
                date:
                  type: string
                  format: date-time
                  description: "The date and time of attendance"
                  example: "2024-12-30T10:00:00"
      responses:
        '200':
          description: "Attendance successfully updated"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Attendance updated successfully."
        '400':
          description: "Invalid attendance data or attendance not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid attendance data or attendance not found."
  /event/attendance/{seID}:
    delete:
      summary: "Delete student attendance for an event"
      description: "Removes the attendance record of a student identified by `seID` for a specific event."
      operationId: deleteAttendance
      tags:
        - "Event Management"
      parameters:
        - in: path
          name: seID
          required: true
          description: "The unique ID of the student event attendance record to be deleted"
          schema:
            type: integer
            example: 123
      responses:
        '200':
          description: "Attendance successfully deleted"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Attendance deleted successfully."
        '400':
          description: "Invalid attendance ID or record not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid attendance ID or record not found."
  /portfolios/create/{uid}:
    post:
      summary: "Create a new portfolio for a user"
      description: "This endpoint creates a new portfolio for a user identified by the given user ID."
      operationId: createPortfolio
      tags:
        - "Portfolio Management"
      parameters:
        - name: uid
          in: path
          required: true
          description: "The ID of the user for whom the portfolio is to be created."
          schema:
            type: integer
            example: 123
      requestBody:
        description: "Portfolio data to be created."
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                displayName:
                  type: string
                  description: "The display name for the portfolio"
                  example: "John Doe's Portfolio"
                description:
                  type: string
                  description: "A brief description of the portfolio"
                  example: "A comprehensive portfolio showcasing technology projects"
                technologies:
                  type: array
                  description: "List of technologies used or featured in the portfolio"
                  items:
                    type: string
                    example: ["Java", "Spring Boot", "React"]
                githubUsername:
                  type: string
                  description: "GitHub username associated with the portfolio"
                  example: "johndoe123"
                linkedinUsername:
                  type: string
                  description: "LinkedIn username associated with the portfolio"
                  example: "john-doe"
      responses:
        '200':
          description: "Portfolio created successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Portfolio created successfully"
        '400':
          description: "Failed to create portfolio"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Failed to create portfolio: [error message]"
  /portfolios/{id}:
    put:
      summary: "Update an existing portfolio"
      description: "This endpoint updates an existing portfolio identified by the given portfolio ID."
      operationId: updatePortfolio
      tags:
        - "Portfolio Management"
      parameters:
        - name: id
          in: path
          required: true
          description: "The ID of the portfolio to be updated."
          schema:
            type: integer
            example: 123
      requestBody:
        description: "Portfolio data to be updated."
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                displayName:
                  type: string
                  description: "The display name for the portfolio"
                  example: "Updated Portfolio Name"
                description:
                  type: string
                  description: "A brief description of the portfolio"
                  example: "Updated description for the portfolio"
                technologies:
                  type: array
                  description: "List of updated technologies used or featured in the portfolio"
                  items:
                    type: string
                    example: ["Java", "Angular", "Spring Boot"]
                githubUsername:
                  type: string
                  description: "Updated GitHub username associated with the portfolio"
                  example: "updatedGitHubUsername"
                linkedinUsername:
                  type: string
                  description: "Updated LinkedIn username associated with the portfolio"
                  example: "updated-linkedin-username"
      responses:
        '200':
          description: "Portfolio updated successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Portfolio updated successfully"
        '400':
          description: "Failed to update portfolio"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Failed to update portfolio"
    get:
      summary: "Retrieve Portfolio by ID"
      description: "Fetch the details of a portfolio by its ID."
      operationId: getPortfolio
      tags:
        - "Portfolio Management"
      parameters:
        - name: id
          in: path
          required: true
          description: "The ID of the portfolio to be retrieved"
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: "Successfully retrieved the portfolio"
          content:
            application/json:
              schema:
                type: object
                properties:
                  displayName:
                    type: string
                    example: "John's Portfolio"
                  description:
                    type: string
                    example: "A showcase of my best work."
                  technologies:
                    type: array
                    items:
                      type: string
                      example: ["Java", "Spring Boot", "React"]
                  githubUsername:
                    type: string
                    example: "johnDoeGit"
                  linkedinUsername:
                    type: string
                    example: "johnDoeLinkedIn"
        '400':
          description: "Failed to retrieve the portfolio due to an error"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Failed to get portfolio: Portfolio not found"
  /portfolios/public/{pid}:
    put:
      summary: "Update the public status of a portfolio"
      description: "This endpoint updates the public visibility status of a portfolio identified by the given portfolio ID."
      operationId: updateIsPublic
      tags:
        - "Portfolio Management"
      parameters:
        - name: pid
          in: path
          required: true
          description: "The ID of the portfolio to update the public status."
          schema:
            type: integer
            example: 123
      responses:
        '200':
          description: "Portfolio public status updated successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Portfolio updated successfully"
        '400':
          description: "Failed to update portfolio"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Failed to update portfolio"
  /portfolios/private/{pid}:
    put:
      summary: "Update portfolio visibility to private"
      description: "This endpoint updates the visibility of a portfolio, setting it to private based on the given portfolio ID."
      operationId: updateIsPrivate
      tags:
        - "Portfolio Management"
      parameters:
        - name: pid
          in: path
          required: true
          description: "The ID of the portfolio to be updated."
          schema:
            type: integer
            example: 123
      responses:
        '200':
          description: "Portfolio updated successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Portfolio updated successfully"
        '400':
          description: "Failed to update portfolio"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Failed to update portfolio"
  /portfolios/by_user/{uid}:
    get:
      summary: "Retrieve Portfolio by User ID"
      description: "Fetch the details of a portfolio associated with the provided user ID."
      operationId: getPortfolioByUID
      tags:
        - "Portfolio Management"
      parameters:
        - name: uid
          in: path
          required: true
          description: "The user ID of the portfolio to be retrieved"
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: "Successfully retrieved the portfolio by user ID"
          content:
            application/json:
              schema:
                type: object
                properties:
                  displayName:
                    type: string
                    example: "John's Portfolio"
                  description:
                    type: string
                    example: "A showcase of my best work."
                  technologies:
                    type: array
                    items:
                      type: string
                    example: ["Java", "Spring Boot", "React"]
                  githubUsername:
                    type: string
                    example: "johnDoeGit"
                  linkedinUsername:
                    type: string
                    example: "johnDoeLinkedIn"
        '400':
          description: "Failed to retrieve the portfolio due to an error"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Failed to get portfolio"
  /portfolios/public/{uid}:
    get:
      summary: "Retrieve Public Portfolios by User ID"
      description: "Fetch the public portfolio details associated with the provided user ID."
      operationId: getPublicPortfoliosByUID
      tags:
        - "Portfolio Management"
      parameters:
        - name: uid
          in: path
          required: true
          description: "The user ID of the public portfolio to be retrieved"
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: "Successfully retrieved the public portfolio by user ID"
          content:
            application/json:
              schema:
                type: object
                properties:
                  displayName:
                    type: string
                    example: "John's Public Portfolio"
                  description:
                    type: string
                    example: "A showcase of my public work."
                  technologies:
                    type: array
                    items:
                      type: string
                    example: ["Java", "Spring Boot", "React"]
                  githubUsername:
                    type: string
                    example: "johnDoeGit"
                  linkedinUsername:
                    type: string
                    example: "johnDoeLinkedIn"
        '400':
          description: "Failed to retrieve the public portfolio due to an error"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Failed to get portfolio"
  /projects/create/{pid}:
    post:
      summary: "Create a new Project"
      description: "Create a new project associated with a specific project ID (pid) using the provided project details."
      operationId: createProject
      tags:
        - "Project Management"
      parameters:
        - name: pid
          in: path
          required: true
          description: "The project ID that will be associated with the new project"
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                displayName:
                  type: string
                  description: "The display name of the project."
                  example: "Awesome Project"
                description:
                  type: string
                  description: "A brief description of the project."
                  example: "This project demonstrates awesome features."
                technologies:
                  type: array
                  items:
                    type: string
                  description: "List of technologies used in the project."
                  example: ["Java", "Spring Boot", "Angular"]
                resourcesLink:
                  type: string
                  description: "A link to resources related to the project."
                  example: "https://github.com/awesome-project"
      responses:
        '200':
          description: "Successfully created the project"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Project created successfully"
        '400':
          description: "Failed to create the project due to an error"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Failed to create project: Invalid data"
  /projects/{pid}:
    get:
      summary: "Get Projects by Portfolio"
      description: "Retrieve a list of projects associated with a specific portfolio using the provided portfolio ID (pid)."
      operationId: getProjects
      tags:
        - "Project Management"
      parameters:
        - name: pid
          in: path
          required: true
          description: "The ID of the portfolio for which the projects are being fetched."
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: "Successfully retrieved the projects"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    displayName:
                      type: string
                      description: "The display name of the project."
                      example: "Awesome Project"
                    description:
                      type: string
                      description: "A brief description of the project."
                      example: "This project demonstrates amazing features."
                    technologies:
                      type: array
                      items:
                        type: string
                      description: "List of technologies used in the project."
                      example: ["Java", "Spring Boot", "React"]
                    resourcesLink:
                      type: string
                      description: "A link to resources related to the project."
                      example: "https://github.com/awesome-project"
        '400':
          description: "Failed to get the projects due to an error"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Failed to get projects: Portfolio not found"
  /projects/{id}:
    put:
      summary: "Update an existing Project"
      description: "Update an existing project based on the provided project ID (id) and new project details."
      operationId: updateProject
      tags:
        - "Project Management"
      parameters:
        - name: id
          in: path
          required: true
          description: "The ID of the project to be updated."
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                displayName:
                  type: string
                  description: "The display name of the project."
                  example: "Updated Awesome Project"
                description:
                  type: string
                  description: "A brief description of the project."
                  example: "This project demonstrates new awesome features."
                technologies:
                  type: array
                  items:
                    type: string
                  description: "List of technologies used in the project."
                  example: ["Java", "Spring Boot", "React"]
                resourcesLink:
                  type: string
                  description: "A link to resources related to the project."
                  example: "https://github.com/updated-awesome-project"
      responses:
        '200':
          description: "Successfully updated the project"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Project updated successfully"
        '400':
          description: "Failed to update the project due to an error"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Failed to update project: Invalid data"
    delete:
      summary: "Delete a Project"
      description: "Deletes the project with the specified ID (id)."
      operationId: deleteProject
      tags:
        - "Project Management"
      parameters:
        - name: id
          in: path
          required: true
          description: "The ID of the project to be deleted."
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: "Successfully deleted the project"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Project deleted successfully"
        '400':
          description: "Failed to delete the project due to an error"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Failed to delete project"
  /announcements:
    post:
      summary: "Create a new Announcement"
      description: "Creates a new announcement with the specified details."
      operationId: createAnnouncement
      tags:
        - "Announcement"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                subject:
                  type: string
                  example: "this is announcement"
                  description: "The subject/title of the announcement."
                message:
                  type: string
                  example: "message is message"
                  description: "The message content of the announcement."
                createdBy:
                  type: integer
                  example: 10
                  description: "ID of the user who created the announcement."
                students:
                  type: array
                  items:
                    type: integer
                  example: [12]
                  description: "List of student IDs the announcement is intended for."
                batches:
                  type: array
                  items:
                    type: integer
                  example: [1, 2]
                  description: "List of batch IDs associated with the announcement."
      responses:
        '200':
          description: "Announcement created successfully."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Announcement created successfully"
        '400':
          description: "Failed to create the announcement due to an error."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Failed to create announcement"
  /{aid}:
    get:
      summary: "Get an Announcement by ID"
      description: "Fetches the details of a specific announcement by its ID."
      operationId: getAnnouncement
      tags:
        - "Announcement"
      parameters:
        - name: "aid"
          in: "path"
          required: true
          description: "ID of the announcement to retrieve."
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: "Announcement found successfully."
          content:
            application/json:
              schema:
                type: object
                properties:
                  subject:
                    type: string
                    example: "This is an announcement"
                  message:
                    type: string
                    example: "This is the message content"
                  createdBy:
                    type: integer
                    example: 10
                  students:
                    type: array
                    items:
                      type: integer
                    example: [12]
                  batches:
                    type: array
                    items:
                      type: integer
                    example: [1, 2]
        '404':
          description: "Announcement not found."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Announcement not found: [Error Message]"
  /created_by/{uid}:
    get:
      summary: "Get Announcements by User ID"
      description: "Fetches all announcements created by a specific user by their user ID."
      operationId: getAnnouncementsByuID
      tags:
        - "Announcement"
      parameters:
        - name: "uid"
          in: "path"
          required: true
          description: "ID of the user who created the announcements."
          schema:
            type: integer
            example: 10
      responses:
        '200':
          description: "Announcements found successfully."
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    subject:
                      type: string
                      example: "This is an announcement"
                    message:
                      type: string
                      example: "Message content"
                    createdBy:
                      type: integer
                      example: 10
                    students:
                      type: array
                      items:
                        type: integer
                      example: [12]
                    batches:
                      type: array
                      items:
                        type: integer
                      example: [1, 2]
        '404':
          description: "Announcements not found."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Announcements not found"
  /assigned/batch/{aid}:
    get:
      summary: "Get Assigned Batches by Announcement ID"
      description: "Fetches all batches assigned to a specific announcement using its announcement ID."
      operationId: getAssignedBatches
      tags:
        - "Announcement"
      parameters:
        - name: "aid"
          in: "path"
          required: true
          description: "ID of the announcement to retrieve the assigned batches."
          schema:
            type: integer
            example: 101
      responses:
        '200':
          description: "Assigned batches found successfully."
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    batchId:
                      type: integer
                      example: 1
                    batchName:
                      type: string
                      example: "Batch 1"
                    batchDescription:
                      type: string
                      example: "Description of Batch 1"
        '404':
          description: "Batches not found."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Batches not found"
  /assigned/student/{aid}:
    get:
      summary: "Get Assigned Students by Announcement ID"
      description: "Fetches all students assigned to a specific announcement using its announcement ID."
      operationId: getAssignedStudents
      tags:
        - "Announcement"
      parameters:
        - name: "aid"
          in: "path"
          required: true
          description: "ID of the announcement to retrieve the assigned students."
          schema:
            type: integer
            example: 101
      responses:
        '200':
          description: "Assigned students found successfully."
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    studentId:
                      type: integer
                      example: 1
                    studentName:
                      type: string
                      example: "John Doe"
                    studentEmail:
                      type: string
                      example: "john.doe@example.com"
        '404':
          description: "Students not found."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Students not found"
  /assigned/announcement/student/{uid}:
    get:
      summary: "Get Assigned Announcements by User ID"
      description: "Fetches all announcements assigned to a specific student using their user ID."
      operationId: getAssignedAnnouncements
      tags:
        - "Announcement"
      parameters:
        - name: "uid"
          in: "path"
          required: true
          description: "ID of the student to retrieve the assigned announcements."
          schema:
            type: integer
            example: 101
      responses:
        '200':
          description: "Assigned announcements found successfully."
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    announcementId:
                      type: integer
                      example: 1
                    subject:
                      type: string
                      example: "Exam Announcement"
                    message:
                      type: string
                      example: "Exam will be held on next Monday."
                    createdBy:
                      type: integer
                      example: 10
        '404':
          description: "Announcements not found."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Announcements not found"
  /assigned/announcement/batch/{bID}:
    get:
      summary: "Get Assigned Announcements by Batch ID"
      description: "Fetches all announcements assigned to a specific batch using its batch ID."
      operationId: getAssignedAnnouncementsByBatch
      tags:
        - "Announcement"
      parameters:
        - name: "bID"
          in: "path"
          required: true
          description: "ID of the batch to retrieve the assigned announcements."
          schema:
            type: integer
            example: 5
      responses:
        '200':
          description: "Assigned announcements found successfully."
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    announcementId:
                      type: integer
                      example: 1
                    subject:
                      type: string
                      example: "Batch 2025 Meeting"
                    message:
                      type: string
                      example: "There will be a meeting for batch 2025 on next Wednesday."
                    createdBy:
                      type: integer
                      example: 10
        '404':
          description: "Announcements not found."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Announcements not found"
  /create/individual:
    post:
      summary: "Create Individual Feedback"
      description: "Creates individual feedback for students. Takes an array of feedback objects, each containing a student ID and the feedback message."
      operationId: createIndividualFeedback
      tags:
        - "Feedback"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                individualFeedbackDTOS:
                  type: array
                  items:
                    type: object
                    properties:
                      seID:
                        type: integer
                        example: 1
                        description: "Student ID"
                      feedback:
                        type: string
                        example: "good"
                        description: "Feedback message for the student"
              example:
                individualFeedbackDTOS:
                  - seID: 1
                    feedback: "good"
                  - seID: 5
                    feedback: "very good"
      responses:
        '200':
          description: "Feedback created successfully."
          content:
            application/json:
              schema:
                type: string
                example: "Feedback created successfully"
        '400':
          description: "Failed to create feedback."
          content:
            application/json:
              schema:
                type: string
                example: "Failed to create feedback"
  /create/group/{eID}:
    post:
      summary: "Create Group Feedback"
      description: "Creates group feedback for a specific event. Takes a feedback message for the group related to the event."
      operationId: createGroupFeedback
      tags:
        - "Feedback"
      parameters:
        - in: path
          name: eID
          required: true
          description: "Event ID for which the group feedback is being created."
          schema:
            type: integer
            example: 101
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                feedback:
                  type: string
                  example: "event 1 group feedback"
                  description: "The feedback message for the group regarding the event."
              required:
                - feedback
              example:
                feedback: "event 1 group feedback"
      responses:
        '200':
          description: "Feedback created successfully."
          content:
            application/json:
              schema:
                type: string
                example: "Feedback created successfully"
        '400':
          description: "Failed to create feedback."
          content:
            application/json:
              schema:
                type: string
                example: "Failed to create feedback"
  /update/{fID}:
    put:
      summary: "Update Feedback"
      description: "Updates the feedback details for a specific feedback ID."
      operationId: updateFeedback
      tags:
        - "Feedback"
      parameters:
        - in: path
          name: fID
          required: true
          description: "Feedback ID to be updated."
          schema:
            type: integer
            example: 1001
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                feedback:
                  type: string
                  example: "Updated feedback message"
                  description: "Updated feedback message."
              required:
                - feedback
              example:
                feedback: "Updated feedback message"
      responses:
        '200':
          description: "Feedback updated successfully."
          content:
            application/json:
              schema:
                type: string
                example: "Feedback updated successfully"
        '400':
          description: "Failed to update feedback."
          content:
            application/json:
              schema:
                type: string
                example: "Failed to update feedback"
  /{fID}:
    get:
      summary: "Get Feedback"
      description: "Fetches feedback details for a specific feedback ID."
      operationId: getFeedback
      tags:
        - "Feedback"
      parameters:
        - in: path
          name: fID
          required: true
          description: "Feedback ID to retrieve details."
          schema:
            type: integer
            example: 1001
      responses:
        '200':
          description: "Successfully retrieved the feedback."
          content:
            application/json:
              schema:
                type: object
                properties:
                  fID:
                    type: integer
                    example: 1001
                  feedback:
                    type: string
                    example: "This is a feedback message"
                  createdAt:
                    type: string
                    format: date-time
                    example: "2025-01-04T10:00:00Z"
        '400':
          description: "Failed to get feedback."
          content:
            application/json:
              schema:
                type: string
                example: "Failed to get feedback"
  /{eID}/{uID}:
    get:
      summary: "Get Feedback by Event ID and User ID"
      description: "Fetches feedback details for a specific event and user based on event ID (eID) and user ID (uID)."
      operationId: getFeedbackByEventAndUser
      tags:
        - "Feedback"
      parameters:
        - in: path
          name: eID
          required: true
          description: "Event ID to retrieve feedback for."
          schema:
            type: integer
            example: 101
        - in: path
          name: uID
          required: true
          description: "User ID to retrieve feedback for."
          schema:
            type: integer
            example: 202
      responses:
        '200':
          description: "Successfully retrieved the feedback."
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    fID:
                      type: integer
                      example: 3001
                    feedback:
                      type: string
                      example: "Great event!"
                    createdAt:
                      type: string
                      format: date-time
                      example: "2025-01-04T10:00:00Z"
        '400':
          description: "Failed to get feedback."
          content:
            application/json:
              schema:
                type: string
                example: "Failed to get feedback"
  /create:
    post:
      summary: "Create a new suggestion"
      description: "Creates a new suggestion. The title, description, and user who created the suggestion are provided. Only up to 5 suggestions can be created; if more are attempted, an error is thrown."
      operationId: createSuggestion
      tags:
        - "Suggestions"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: "Title of the suggestion"
                  example: "Improve the User Interface"
                description:
                  type: string
                  description: "Description of the suggestion"
                  example: "The current user interface is difficult to navigate, adding clearer sections will improve user experience."
                createdBy:
                  type: integer
                  description: "ID of the user creating the suggestion"
                  example: 1001
      responses:
        '200':
          description: "Successfully created the suggestion."
          content:
            application/json:
              schema:
                type: string
                example: "Suggestion created successfully"
        '400':
          description: "User not found for the provided createdBy ID."
          content:
            application/json:
              schema:
                type: string
                example: "User not found"
  /vote/{sID}/{uID}:
    post:
      summary: "Vote for a suggestion"
      description: "Allows a user to vote for a suggestion. If the user has already voted, the vote is removed. If the user hasn't voted yet, their vote is recorded."
      operationId: voteForSuggestion
      tags:
        - "Suggestions"
      parameters:
        - name: sID
          in: path
          required: true
          description: "The ID of the suggestion being voted on"
          schema:
            type: integer
            example: 1
        - name: uID
          in: path
          required: true
          description: "The ID of the user casting the vote"
          schema:
            type: integer
            example: 1001
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sID:
                  type: integer
                  description: "The ID of the suggestion being voted on"
                  example: 1
                uID:
                  type: integer
                  description: "The ID of the user casting the vote"
                  example: 1001
      responses:
        '200':
          description: "Vote was successfully cast or removed."
          content:
            application/json:
              schema:
                type: string
                example: "Voted successfully"
        '400':
          description: "Failed to process the vote, e.g., user or suggestion not found."
          content:
            application/json:
              schema:
                type: string
                example: "Suggestion not found"
  /suggestions/active:
    get:
      summary: "Get active suggestions"
      description: "Fetch all active (not expired) suggestions."
      operationId: getActiveSuggestions
      tags:
        - "Suggestions"
      responses:
        '200':
          description: "Successfully retrieved active suggestions."
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      description: "The ID of the suggestion"
                      example: 1
                    title:
                      type: string
                      description: "The title of the suggestion"
                      example: "Suggestion Title"
                    description:
                      type: string
                      description: "The description of the suggestion"
                      example: "This is a suggestion description"
                    createdBy:
                      type: integer
                      description: "The ID of the user who created the suggestion"
                      example: 1001
                    expired:
                      type: boolean
                      description: "Indicates if the suggestion has expired"
                      example: false
        '400':
          description: "Failed to retrieve active suggestions."
          content:
            application/json:
              schema:
                type: string
                example: "Failed to retrieve active suggestions"
  /suggestions/expired:
    get:
      summary: "Get expired suggestions"
      description: "Fetch all expired suggestions."
      operationId: getExpiredSuggestions
      tags:
        - "Suggestions"
      responses:
        '200':
          description: "Successfully retrieved expired suggestions."
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      description: "The ID of the suggestion"
                      example: 1
                    title:
                      type: string
                      description: "The title of the suggestion"
                      example: "Expired Suggestion Title"
                    description:
                      type: string
                      description: "The description of the suggestion"
                      example: "This suggestion has expired."
                    createdBy:
                      type: integer
                      description: "The ID of the user who created the suggestion"
                      example: 1001
                    expired:
                      type: boolean
                      description: "Indicates if the suggestion has expired"
                      example: true
        '400':
          description: "Failed to retrieve expired suggestions."
          content:
            application/json:
              schema:
                type: string
                example: "Failed to retrieve expired suggestions"
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/ANUSHIDESILVA28/EAD2/1.0.0